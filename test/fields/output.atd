extract_highlight keyword.search
extract_highlight content.text.fr
extract_highlight content.text.en
extract_highlight content.text.fr.exact
extract_highlight content.text.en.exact
derive_highlight input keyword.search
derive_highlight input content.text.fr
derive_highlight input content.text.en
derive_highlight input content.text.fr.exact
derive_highlight input content.text.en.exact
esname Content.Text.En
esname Content.Text.En.Exact
esname Content.Text.Fr
esname Content.Text.Fr.Exact
esname Keyword.Search
parent esname Content
parent esname Content.Text
parent esname Content.Text.En
parent esname Content.Text.En.Exact
parent esname Content.Text.Fr
parent esname Content.Text.Fr.Exact
parent esname Keyword
parent esname Keyword.Search
make  ""
make_properties ""
make keyword "keyword"
make_fields "keyword"
make search "keyword.search"
make content "content"
make_properties "content"
make text "content.text"
make_properties "content.text"
make en "content.text.en"
make_fields "content.text.en"
make exact "content.text.en.exact"
make fr "content.text.fr"
make_fields "content.text.fr"
make exact "content.text.fr.exact"
derive_highlight keyword.search
derive_highlight content.text.en.exact
derive_highlight content.text.fr.exact
make  ""
make_properties ""
make keyword "keyword"
make_fields "keyword"
make content "content"
make_properties "content"
make text "content.text"
make_properties "content.text"
make en "content.text.en"
make_fields "content.text.en"
make fr "content.text.fr"
make_fields "content.text.fr"
(* Generated by esgg output from fields/query.json based on fields/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type int_as_float =
  float wrap <ocaml t="int" wrap="int_of_float" unwrap="float_of_int">
type 'a value_agg' = { value: 'a }
type 'a value_agg =
  'a value_agg' wrap
    <ocaml
       t="'a" wrap="fun { value; } -> value" unwrap="fun value -> { value; }">
type basic_json <ocaml module="Json" t="t"> = abstract
type text = {
  ?en: string wrap <ocaml module="Content.Text.En"> nullable;
  ?fr: string wrap <ocaml module="Content.Text.Fr"> nullable
}
type content = { text: text }
type _source = {
  keyword: string wrap <ocaml module="Keyword">;
  content: content
}
type highlight = {
  ~keyword_search <json name="keyword.search">:
    string wrap <ocaml module="Keyword.Search"> list;
  ~content_text_en_exact <json name="content.text.en.exact">:
    string wrap <ocaml module="Content.Text.En.Exact"> list;
  ~content_text_fr_exact <json name="content.text.fr.exact">:
    string wrap <ocaml module="Content.Text.Fr.Exact"> list
}
type hit = { _id: string; _source: _source; ?highlight: highlight nullable }
type hits = { total: int; ~hits: hit list }
type result = { hits: hits }
