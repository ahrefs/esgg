(* Generated by esgg from serps/rtOverviewKeywords.query.json based on serps/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type hits = { total: int }
type _source = {
  block_pos: int wrap <ocaml module="Serps.Positions.Block_pos">;
  type_ <json name="type">: string wrap <ocaml module="Serps.Positions.Type">;
  url: string wrap <ocaml module="Serps.Positions.Url">
}
type hit = { _source: _source }
type hits1 = { total: int; ~hits: hit list }
type top_position = { hits: hits1 }
type nest_filters = { doc_count: int; top_position: top_position }
type traffic = { value: float }
type organic = {
  doc_count: int;
  nest_filters: nest_filters;
  traffic: traffic
}
type target = { doc_count: int; organic: organic }
type nest_positions = {
  doc_count: int;
  target: target;
  serp_features:
    string wrap <ocaml module="Serps.Positions.Type"> doc_count buckets
}
type last_update = {
  ~last_update: string wrap <ocaml module="Serps.Last_update"> list
}
type hit1 = { _id: string; _source: last_update }
type hits2 = { total: int; ~hits: hit1 list }
type data = { hits: hits2 }
type firstSerp = {
  doc_count: int;
  nest_positions: nest_positions;
  data: data
}
type _source1 = {
  ordinal: int wrap <ocaml module="Serps.Positions.Ordinal">;
  block_pos: int wrap <ocaml module="Serps.Positions.Block_pos">;
  type_ <json name="type">: string wrap <ocaml module="Serps.Positions.Type">;
  url: string wrap <ocaml module="Serps.Positions.Url">
}
type hit2 = { _source: _source1 }
type hits3 = { total: int; ~hits: hit2 list }
type top_position1 = { hits: hits3 }
type nest_filters1 = { doc_count: int; top_position: top_position1 }
type organic1 = {
  doc_count: int;
  nest_filters: nest_filters1;
  traffic: traffic
}
type target1 = {
  doc_count: int;
  organic: organic1;
  target_features:
    string wrap <ocaml module="Serps.Positions.Type"> doc_count buckets
}
type nest_positions1 = {
  doc_count: int;
  target: target1;
  serp_features:
    string wrap <ocaml module="Serps.Positions.Type"> doc_count buckets
}
type _source2 = {
  language: string wrap <ocaml module="Serps.Language">;
  country: string wrap <ocaml module="Serps.Country">;
  location: string wrap <ocaml module="Serps.Location">;
  first_seen: string wrap <ocaml module="Serps.First_seen">;
  ~last_update: string wrap <ocaml module="Serps.Last_update"> list;
  difficulty: int wrap <ocaml module="Serps.Difficulty">;
  nice_volume: int wrap <ocaml module="Serps.Nice_volume">;
  hash: int <ocaml repr="int64"> wrap <ocaml module="Serps.Hash">;
  keyword: string wrap <ocaml module="Serps.Keyword">
}
type hit3 = { _id: string; _source: _source2 }
type hits4 = { total: int; ~hits: hit3 list }
type data1 = { hits: hits4 }
type lastSerp = {
  doc_count: int;
  nest_positions: nest_positions1;
  data: data1
}
type keywords = {
  key: int <ocaml repr="int64"> wrap <ocaml module="Serps.Hash">;
  doc_count: int;
  firstSerp: firstSerp;
  lastSerp: lastSerp
}
type aggregations = { keywords: keywords buckets }
type result = { hits: hits; aggregations: aggregations }
