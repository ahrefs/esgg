(* Generated by esgg from serps/get-top-competitors.query.json based on serps/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type int_as_float =
  float wrap <ocaml t="int" wrap="int_of_float" unwrap="float_of_int">
type 'a value_agg' = { value: 'a }
type 'a value_agg =
  'a value_agg' wrap
    <ocaml
       t="'a" wrap="fun { value; } -> value" unwrap="fun value -> { value; }">
type basic_json <ocaml module="Json" t="json"> = abstract
type stats = {
  nr_int_url: int wrap <ocaml module="Serps.Stats.Nr_int_url">;
  nr_ext_url: int wrap <ocaml module="Serps.Stats.Nr_ext_url">;
  recognized: float wrap <ocaml module="Serps.Stats.Recognized">;
  real_country: string wrap <ocaml module="Serps.Stats.Real_country">;
  bad_country: string wrap <ocaml module="Serps.Stats.Bad_country">;
  uul_text: string wrap <ocaml module="Serps.Stats.Uul_text">;
  real_uul_country: string wrap <ocaml module="Serps.Stats.Real_uul_country">;
  bad_uul_country: string wrap <ocaml module="Serps.Stats.Bad_uul_country">
}
type _source = {
  ~last_update: string wrap <ocaml module="Serps.Last_update"> list;
  prev_update: string wrap <ocaml module="Serps.Prev_update">;
  difficulty: int wrap <ocaml module="Serps.Difficulty">;
  nice_volume: int wrap <ocaml module="Serps.Nice_volume">;
  keyword: string wrap <ocaml module="Serps.Keyword">;
  nice_cpc: int wrap <ocaml module="Serps.Nice_cpc">;
  competition: int wrap <ocaml module="Serps.Competition">;
  results: int wrap <ocaml module="Serps.Results">;
  stats: stats
}
type hit = { _id: string; _source: _source }
type hits = { total: int; ~hits: hit list }
type position = { url: string wrap <ocaml module="Serps.Positions.Url"> }
type positions = { ~positions: position list }
type hit1 = { _id: string; _source: positions }
type hits1 = { total: int; ~hits: hit1 list }
type hits2 = { hits: hits1 }
type topCompetitors = {
  key:
    int <ocaml repr="int64"> wrap
      <ocaml module="Serps.Urls_hashes_top10.Rootdomain">;
  doc_count: int;
  hits: hits2
}
type aggregations = { topCompetitors: topCompetitors buckets }
type result = { hits: hits; aggregations: aggregations }
