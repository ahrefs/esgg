(* Generated by esgg from keywords/count.query.json based on keywords/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type t0 = {
  ?keyword_explorer: string nullable;
  ?clickstream: string nullable
}
type _source = {
  ?parent_keyword: string nullable;
  ?parent_volume: float nullable;
  ?parent_traffic: float nullable;
  ?nice_parent_volume: int nullable;
  ?nice_parent_traffic: int nullable;
  ?volume: float nullable;
  ?nice_volume: int nullable;
  ?global_volume: float nullable;
  ?nice_global_volume: int nullable;
  ?provider: string nullable;
  ?country: string nullable;
  ?keyword: string nullable;
  ?source_file: string nullable;
  ?source_line: int nullable;
  ?avg_volume: float nullable;
  ?pred_volume: float nullable;
  ?percent_clicks_organic: float nullable;
  ?percent_clicks_paid: float nullable;
  ?ctr_p_organic: float nullable;
  ?return_rate: float nullable;
  ?clicks_per_search: float nullable;
  ?clicks_per_search_organic: float nullable;
  ?clicks_per_search_paid: float nullable;
  ?difficulty: int nullable;
  ?first_seen: string nullable;
  ?last_update: string nullable;
  ?serp_last_update: string nullable;
  ?serp_features: string list nullable;
  ?sources: t0 nullable;
  ?cpc: int nullable;
  ?nice_cpc: int nullable;
  ?user_id: int nullable;
  ?dashboard_id: int nullable
}
type t1 = { _id: string; _source: _source }
type hits = { total: int; ~hits: t1 list }
type t2 = { key: int; doc_count: int; key_as_string: string }
type totalVolume = { ?value: float nullable }
type aggregations = { byMonth: t2 buckets; totalVolume: totalVolume }
type result = { hits: hits; aggregations: aggregations }
