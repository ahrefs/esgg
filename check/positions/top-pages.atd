(* Generated by esgg from positions/top-pages.query.json based on positions/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type int_as_float =
  float wrap <ocaml t="int" wrap="int_of_float" unwrap="float_of_int">
type 'a value_agg' = { value: 'a }
type 'a value_agg =
  'a value_agg' wrap
    <ocaml
       t="'a" wrap="fun { value; } -> value" unwrap="fun value -> { value; }">
type basic_json <ocaml module="Json" t="t"> = abstract
type history = {
  position: int wrap <ocaml module="Positions.History.Position">;
  ordinal: int wrap <ocaml module="Positions.History.Ordinal">;
  block_pos: int wrap <ocaml module="Positions.History.Block_pos">;
  link_pos: int wrap <ocaml module="Positions.History.Link_pos">
}
type stats = {
  volume: float wrap <ocaml module="Positions.Stats.Volume">;
  nice_volume: int wrap <ocaml module="Positions.Stats.Nice_volume">;
  cost: float wrap <ocaml module="Positions.Stats.Cost">;
  nice_cost: int wrap <ocaml module="Positions.Stats.Nice_cost">;
  ctr_p: float wrap <ocaml module="Positions.Stats.Ctr_p">;
  nr_pos: int wrap <ocaml module="Positions.Stats.Nr_pos">
}
type _source = {
  last_update: string wrap <ocaml module="Positions.Last_update">;
  prev_update: string wrap <ocaml module="Positions.Prev_update">;
  difficulty: int wrap <ocaml module="Positions.Difficulty">;
  nice_volume: int wrap <ocaml module="Positions.Nice_volume">;
  keyword: string wrap <ocaml module="Positions.Keyword">;
  nice_cpc: int wrap <ocaml module="Positions.Nice_cpc">;
  competition: int wrap <ocaml module="Positions.Competition">;
  results: int wrap <ocaml module="Positions.Results">;
  block_pos: int wrap <ocaml module="Positions.Block_pos">;
  type_ <json name="type">: string wrap <ocaml module="Positions.Type">;
  url: string wrap <ocaml module="Positions.Url">;
  history: history;
  has_thumbnail: bool wrap <ocaml module="Positions.Has_thumbnail">;
  video: string wrap <ocaml module="Positions.Video">;
  stats: stats;
  ~serp_features: string wrap <ocaml module="Positions.Serp_features"> list
}
type hit = { _id: string; _source: _source }
type hits = { total: int; ~hits: hit list }
type _source1 = {
  nice_volume: int wrap <ocaml module="Positions.Nice_volume">;
  keyword: string wrap <ocaml module="Positions.Keyword">;
  block_pos: int wrap <ocaml module="Positions.Block_pos">;
  type_ <json name="type">: string wrap <ocaml module="Positions.Type">;
  url: string wrap <ocaml module="Positions.Url">;
  ~serp_features: string wrap <ocaml module="Positions.Serp_features"> list
}
type hit1 = { _id: string; _source: _source1 }
type hits1 = { total: int; ~hits: hit1 list }
type top = { hits: hits1 }
type metrics = {
  refdomains: int wrap <ocaml module="Positions.Metrics.Refdomains">
}
type metrics1 = { metrics: metrics }
type hit2 = { _id: string; _source: metrics1 }
type hits2 = { total: int; ~hits: hit2 list }
type top2 = { hits: hits2 }
type have_rd = { doc_count: int; top2: top2 }
type topPages = {
  key:
    int <ocaml repr="int64"> wrap
      <ocaml module="Positions.Url_hash.Exact_only">;
  doc_count: int;
  traffic: float value_agg;
  traffic_value: float value_agg;
  top: top;
  have_rd: have_rd
}
type aggregations = {
  topPages: topPages buckets;
  totalPages: int value_agg;
  totalTraffic: float value_agg
}
type result = { hits: hits; aggregations: aggregations }
