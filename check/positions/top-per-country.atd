(* Generated by esgg from positions/top-per-country.query.json based on positions/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type t0 = { position: int; ordinal: int; block_pos: int; link_pos: int }
type t1 = {
  volume: float;
  nice_volume: int;
  cost: float;
  nice_cost: int;
  ctr_p: float;
  nr_pos: int
}
type t2 = {
  backlinks: int;
  refdomains: int;
  refclass_c: int;
  domain_rating: int;
  ahrefs_rank: int;
  ahrefs_top: int;
  gplus: int;
  facebook: int;
  linkedin: int;
  nr_keywords: int;
  traffic: float;
  top_keyword: string;
  top_keyword_id: string;
  top_volume: float;
  nice_top_volume: int
}
type t3 = { nr_type: int; type_ <json name="type">: string }
type t4 = {
  user_id: int;
  dashboard_id: int;
  keyword_id: int;
  provider: string;
  language: string;
  country: string;
  location: string;
  first_seen: string;
  last_update: string;
  next_update: string;
  prev_update: string;
  difficulty: int;
  parent_keyword: string;
  parent_volume: float;
  parent_traffic: float;
  nice_parent_volume: int;
  nice_parent_traffic: int;
  volume: float;
  nice_volume: int;
  global_volume: float;
  nice_global_volume: int;
  keyword: string;
  cpc: int;
  nice_cpc: int;
  competition: int;
  results: int;
  position: int;
  ordinal: int;
  block_pos: int;
  link_pos: int;
  type_ <json name="type">: string;
  url: string;
  url_visual: string;
  block: string;
  history: t0;
  title: string;
  title2: string;
  description: string;
  description2: string;
  rating: int;
  has_thumbnail: bool;
  video: string;
  prerender: string;
  company: string;
  features: string;
  stats: t1;
  metrics: t2;
  ad_hash: int <ocaml repr="int64">;
  serp_features: string;
  serp_structure: t3
}
type t5 = { _id: string; _source: t4 }
type t6 = { total: int; ~hits: t5 list }
type value = { ?value: float nullable }
type total = { total: int }
type hits = { hits: total }
type t7 = { doc_count: int; top2: hits }
type t8 = {
  key <doc text="url_hash.exact_only">:
    int <ocaml repr="int64"> wrap
      <ocaml module="Positions.Url_hash.Exact_only">;
  doc_count: int;
  traffic: value;
  traffic_value: value;
  top: hits;
  have_rd: t7
}
type t9 = {
  key <doc text="country">: string wrap <ocaml module="Positions.Country">;
  doc_count: int;
  top: t8 buckets
}
type t10 = { totalTraffic: value; topPerCountry: t9 buckets }
type result = { hits: t6; aggregations: t10 }
