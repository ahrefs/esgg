(* Generated by esgg from positions/top-per-country.query.json based on positions/mapping.json *)
type 'key doc_count = { key: 'key; doc_count: int }
type 'a buckets = { buckets: 'a list }
type int_as_float =
  float wrap <ocaml t="int" wrap="int_of_float" unwrap="float_of_int">
type history = {
  position: int wrap <ocaml module="Positions.History.Position">;
  ordinal: int wrap <ocaml module="Positions.History.Ordinal">;
  block_pos: int wrap <ocaml module="Positions.History.Block_pos">;
  link_pos: int wrap <ocaml module="Positions.History.Link_pos">
}
type stats = {
  volume: float wrap <ocaml module="Positions.Stats.Volume">;
  nice_volume: int wrap <ocaml module="Positions.Stats.Nice_volume">;
  cost: float wrap <ocaml module="Positions.Stats.Cost">;
  nice_cost: int wrap <ocaml module="Positions.Stats.Nice_cost">;
  ctr_p: float wrap <ocaml module="Positions.Stats.Ctr_p">;
  nr_pos: int wrap <ocaml module="Positions.Stats.Nr_pos">
}
type metrics = {
  backlinks: int wrap <ocaml module="Positions.Metrics.Backlinks">;
  refdomains: int wrap <ocaml module="Positions.Metrics.Refdomains">;
  refclass_c: int wrap <ocaml module="Positions.Metrics.Refclass_c">;
  domain_rating: int wrap <ocaml module="Positions.Metrics.Domain_rating">;
  ahrefs_rank: int wrap <ocaml module="Positions.Metrics.Ahrefs_rank">;
  ahrefs_top: int wrap <ocaml module="Positions.Metrics.Ahrefs_top">;
  gplus: int wrap <ocaml module="Positions.Metrics.Gplus">;
  facebook: int wrap <ocaml module="Positions.Metrics.Facebook">;
  linkedin: int wrap <ocaml module="Positions.Metrics.Linkedin">;
  nr_keywords: int wrap <ocaml module="Positions.Metrics.Nr_keywords">;
  traffic: float wrap <ocaml module="Positions.Metrics.Traffic">;
  top_keyword: string wrap <ocaml module="Positions.Metrics.Top_keyword">;
  top_keyword_id:
    string wrap <ocaml module="Positions.Metrics.Top_keyword_id">;
  top_volume: float wrap <ocaml module="Positions.Metrics.Top_volume">;
  nice_top_volume:
    int wrap <ocaml module="Positions.Metrics.Nice_top_volume">
}
type serp_structure = {
  nr_type: int wrap <ocaml module="Positions.Serp_structure.Nr_type">;
  type_ <json name="type">:
    string wrap <ocaml module="Positions.Serp_structure.Type">
}
type _source = {
  user_id: int wrap <ocaml module="Positions.User_id">;
  dashboard_id: int wrap <ocaml module="Positions.Dashboard_id">;
  keyword_id: int wrap <ocaml module="Positions.Keyword_id">;
  provider: string wrap <ocaml module="Positions.Provider">;
  language: string wrap <ocaml module="Positions.Language">;
  country: string wrap <ocaml module="Positions.Country">;
  location: string wrap <ocaml module="Positions.Location">;
  first_seen: string wrap <ocaml module="Positions.First_seen">;
  last_update: string wrap <ocaml module="Positions.Last_update">;
  next_update: string wrap <ocaml module="Positions.Next_update">;
  prev_update: string wrap <ocaml module="Positions.Prev_update">;
  difficulty: int wrap <ocaml module="Positions.Difficulty">;
  parent_keyword: string wrap <ocaml module="Positions.Parent_keyword">;
  parent_volume: float wrap <ocaml module="Positions.Parent_volume">;
  parent_traffic: float wrap <ocaml module="Positions.Parent_traffic">;
  nice_parent_volume: int wrap <ocaml module="Positions.Nice_parent_volume">;
  nice_parent_traffic:
    int wrap <ocaml module="Positions.Nice_parent_traffic">;
  volume: float wrap <ocaml module="Positions.Volume">;
  nice_volume: int wrap <ocaml module="Positions.Nice_volume">;
  global_volume: float wrap <ocaml module="Positions.Global_volume">;
  nice_global_volume: int wrap <ocaml module="Positions.Nice_global_volume">;
  keyword: string wrap <ocaml module="Positions.Keyword">;
  cpc: int wrap <ocaml module="Positions.Cpc">;
  nice_cpc: int wrap <ocaml module="Positions.Nice_cpc">;
  competition: int wrap <ocaml module="Positions.Competition">;
  results: int wrap <ocaml module="Positions.Results">;
  position: int wrap <ocaml module="Positions.Position">;
  ordinal: int wrap <ocaml module="Positions.Ordinal">;
  block_pos: int wrap <ocaml module="Positions.Block_pos">;
  link_pos: int wrap <ocaml module="Positions.Link_pos">;
  type_ <json name="type">: string wrap <ocaml module="Positions.Type">;
  url: string wrap <ocaml module="Positions.Url">;
  url_visual: string wrap <ocaml module="Positions.Url_visual">;
  block: string wrap <ocaml module="Positions.Block">;
  history: history;
  title: string wrap <ocaml module="Positions.Title">;
  title2: string wrap <ocaml module="Positions.Title2">;
  description: string wrap <ocaml module="Positions.Description">;
  description2: string wrap <ocaml module="Positions.Description2">;
  rating: int wrap <ocaml module="Positions.Rating">;
  has_thumbnail: bool wrap <ocaml module="Positions.Has_thumbnail">;
  video: string wrap <ocaml module="Positions.Video">;
  prerender: string wrap <ocaml module="Positions.Prerender">;
  company: string wrap <ocaml module="Positions.Company">;
  features: string wrap <ocaml module="Positions.Features">;
  stats: stats;
  metrics: metrics;
  ad_hash: int <ocaml repr="int64"> wrap <ocaml module="Positions.Ad_hash">;
  ~serp_features: string wrap <ocaml module="Positions.Serp_features"> list;
  serp_structure: serp_structure
}
type hit = { _id: string; _source: _source }
type hits = { total: int; ~hits: hit list }
type totalTraffic = { value: float }
type _source1 = {
  nice_volume: int wrap <ocaml module="Positions.Nice_volume">;
  keyword: string wrap <ocaml module="Positions.Keyword">;
  block_pos: int wrap <ocaml module="Positions.Block_pos">;
  type_ <json name="type">: string wrap <ocaml module="Positions.Type">;
  url: string wrap <ocaml module="Positions.Url">;
  ~serp_features: string wrap <ocaml module="Positions.Serp_features"> list
}
type hit1 = { _id: string; _source: _source1 }
type hits1 = { total: int; ~hits: hit1 list }
type top = { hits: hits1 }
type refdomains = {
  refdomains: int wrap <ocaml module="Positions.Metrics.Refdomains">
}
type metrics1 = { metrics: refdomains }
type hit2 = { _id: string; _source: metrics1 }
type hits2 = { total: int; ~hits: hit2 list }
type top2 = { hits: hits2 }
type have_rd = { doc_count: int; top2: top2 }
type top1 = {
  key:
    int <ocaml repr="int64"> wrap
      <ocaml module="Positions.Url_hash.Exact_only">;
  doc_count: int;
  traffic: totalTraffic;
  traffic_value: totalTraffic;
  top: top;
  have_rd: have_rd
}
type topPerCountry = {
  key: string wrap <ocaml module="Positions.Country">;
  doc_count: int;
  top: top1 buckets
}
type aggregations = {
  totalTraffic: totalTraffic;
  topPerCountry: topPerCountry buckets
}
type result = { hits: hits; aggregations: aggregations }
